// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: refresh_tokens.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createRefreshToken = `-- name: CreateRefreshToken :one
INSERT INTO refresh_tokens (user_id) VALUES ($1)
RETURNING token
`

func (q *Queries) CreateRefreshToken(ctx context.Context, userID uuid.UUID) (string, error) {
	row := q.db.QueryRowContext(ctx, createRefreshToken, userID)
	var token string
	err := row.Scan(&token)
	return token, err
}

const getUserIDFromRefreshToken = `-- name: GetUserIDFromRefreshToken :one
SELECT user_id, expires_at, revoked_at FROM refresh_tokens WHERE token = $1
`

type GetUserIDFromRefreshTokenRow struct {
	UserID    uuid.UUID
	ExpiresAt time.Time
	RevokedAt sql.NullTime
}

func (q *Queries) GetUserIDFromRefreshToken(ctx context.Context, token string) (GetUserIDFromRefreshTokenRow, error) {
	row := q.db.QueryRowContext(ctx, getUserIDFromRefreshToken, token)
	var i GetUserIDFromRefreshTokenRow
	err := row.Scan(&i.UserID, &i.ExpiresAt, &i.RevokedAt)
	return i, err
}

const revokeRefreshToken = `-- name: RevokeRefreshToken :exec
UPDATE refresh_tokens SET revoked_at = CURRENT_TIMESTAMP 
WHERE token = $1
`

func (q *Queries) RevokeRefreshToken(ctx context.Context, token string) error {
	_, err := q.db.ExecContext(ctx, revokeRefreshToken, token)
	return err
}
